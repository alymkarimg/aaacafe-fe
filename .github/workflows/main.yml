# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

- name: Lint Action
  # You may pin to the exact commit or the version.
  # uses: wearerequired/lint-action@b4d7b0695e4e614cf6cc1b36b6344ae7ac451754
  uses: wearerequired/lint-action@v1.11.1
  with:
    # The GitHub token used to authenticated with GitHub.
    github_token: # optional, default is ${{ github.token }}
    # Whether the workflow run should also fail when linter failures are detected
    continue_on_error: # optional, default is true
    # Whether linters should try to fix code style issues automatically
    auto_fix: # optional, default is false
    # Bypass the pre-commit and pre-push git hooks
    git_no_verify: # optional, default is false
    # Username for auto-fix commits
    git_name: # optional, default is Lint Action
    # Email address for auto-fix commits
    git_email: # optional, default is lint-action@samuelmeuli.com
    # Template for auto-fix commit messages. The "${linter}" variable can be used to insert the name of the linter which has created the auto-fix
    commit_message: # optional, default is Fix code style issues with ${linter}
    # Template for the name of the check run. The "${linter}" and "${dir}" variables can be used to insert the name and directory of the linter.
    check_name: # optional, default is ${linter}
    # Whether the check run should conclude with a neutral status instead of success when the linter finds only warnings
    neutral_check_on_warning: # optional, default is false
    # Enable or disable stylelint checks
    stylelint: # optional, default is false
    # Additional arguments to pass to the linter
    stylelint_args: # optional, default is 
    # Directory where the stylelint command should be run
    stylelint_dir: # optional
    # Extensions of files to check with stylelint
    stylelint_extensions: # optional, default is css,sass,scss
    # Shell command to prepend to the linter command
    stylelint_command_prefix: # optional, default is 
    # Enable or disable gofmt checks
    gofmt: # optional, default is false
    # Additional arguments to pass to the linter
    gofmt_args: # optional, default is 
    # Directory where the gofmt command should be run
    gofmt_dir: # optional
    # Extensions of files to check with gofmt
    gofmt_extensions: # optional, default is go
    # Shell command to prepend to the linter command
    gofmt_command_prefix: # optional, default is 
    # Enable or disable golint checks
    golint: # optional, default is false
    # Additional arguments to pass to the linter
    golint_args: # optional, default is 
    # Directory where the golint command should be run
    golint_dir: # optional
    # Extensions of files to check with golint
    golint_extensions: # optional, default is go
    # Shell command to prepend to the linter command
    golint_command_prefix: # optional, default is 
    # Enable or disable ESLint checks
    eslint: # optional, default is false
    # Additional arguments to pass to the linter
    eslint_args: # optional, default is 
    # Directory where the ESLint command should be run
    eslint_dir: # optional
    # Extensions of files to check with ESLint
    eslint_extensions: # optional, default is js
    # Shell command to prepend to the linter command. Will default to `npx --no-install` for NPM and `yarn run --silent` for Yarn.
    eslint_command_prefix: # optional, default is 
    # Enable or disable Prettier checks
    prettier: # optional, default is false
    # Additional arguments to pass to the linter
    prettier_args: # optional, default is 
    # Directory where the Prettier command should be run
    prettier_dir: # optional
    # Extensions of files to check with Prettier
    prettier_extensions: # optional, default is css,html,js,json,jsx,md,sass,scss,ts,tsx,vue,yaml,yml
    # Shell command to prepend to the linter command. Will default to `npx --no-install` for NPM and `yarn run --silent` for Yarn.
    prettier_command_prefix: # optional, default is 
    # Enable or disable XO checks
    xo: # optional, default is false
    # Additional arguments to pass to the linter
    xo_args: # optional, default is 
    # Directory where the XO command should be run
    xo_dir: # optional
    # Extensions of files to check with XO
    xo_extensions: # optional, default is js
    # Shell command to prepend to the linter command. Will default to `npx --no-install` for NPM and `yarn run --silent` for Yarn.
    xo_command_prefix: # optional, default is 
    # Enable or disable PHP_CodeSniffer checks
    php_codesniffer: # optional, default is false
    # Additional arguments to pass to the linter
    php_codesniffer_args: # optional, default is 
    # Directory where the PHP_CodeSniffer command should be run
    php_codesniffer_dir: # optional
    # Extensions of files to check with PHP_CodeSniffer
    php_codesniffer_extensions: # optional, default is php
    # Shell command to prepend to the linter command
    php_codesniffer_command_prefix: # optional, default is 
    # Enable or disable Black checks
    black: # optional, default is false
    # Additional arguments to pass to the linter
    black_args: # optional, default is 
    # Directory where the Black command should be run
    black_dir: # optional
    # Extensions of files to check with Black
    black_extensions: # optional, default is py
    # Shell command to prepend to the linter command
    black_command_prefix: # optional, default is 
    # Enable or disable Flake8 checks
    flake8: # optional, default is false
    # Additional arguments to pass to the linter
    flake8_args: # optional, default is 
    # Directory where the Flake8 command should be run
    flake8_dir: # optional
    # Extensions of files to check with Flake8
    flake8_extensions: # optional, default is py
    # Shell command to prepend to the linter command
    flake8_command_prefix: # optional, default is 
    # Enable or disable Mypy checks
    mypy: # optional, default is false
    # Additional arguments to pass to the linter
    mypy_args: # optional, default is 
    # Directory where the Mypy command should be run
    mypy_dir: # optional
    # Extensions of files to check with Mypy
    mypy_extensions: # optional, default is py
    # Shell command to prepend to the linter command
    mypy_command_prefix: # optional, default is 
    # Enable or disable oitnb checks
    oitnb: # optional, default is false
    # Additional arguments to pass to the linter
    oitnb_args: # optional, default is 
    # Directory where the oitnb command should be run
    oitnb_dir: # optional
    # Extensions of files to check with oitnb
    oitnb_extensions: # optional, default is py
    # Shell command to prepend to the linter command
    oitnb_command_prefix: # optional, default is 
    # Enable or disable RuboCop checks
    rubocop: # optional, default is false
    # Additional arguments to pass to the linter
    rubocop_args: # optional, default is 
    # Directory where the RuboCop command should be run
    rubocop_dir: # optional
    # Extensions of files to check with RuboCop
    rubocop_extensions: # optional, default is rb
    # Shell command to prepend to the linter command
    rubocop_command_prefix: # optional, default is 
    # Enable or disable ERB Lint checks
    erblint: # optional, default is false
    # Additional arguments to pass to the linter
    erblint_args: # optional, default is 
    # Directory where the ERB Lint command should be run
    erblint_dir: # optional
    # Extensions of files to check with ERB Lint
    erblint_extensions: # optional, default is erb
    # Shell command to prepend to the linter command
    erblint_command_prefix: # optional, default is 
    # Enable or disable SwiftFormat checks
    swiftformat: # optional, default is false
    # Additional arguments to pass to the linter
    swiftformat_args: # optional, default is 
    # Directory where the SwiftFormat command should be run
    swiftformat_dir: # optional
    # Extensions of files to check with SwiftFormat
    swiftformat_extensions: # optional, default is swift
    # Shell command to prepend to the linter command
    swiftformat_command_prefix: # optional, default is 
    # Enable or disable SwiftFormat checks
    swift_format_lockwood: # optional, default is false
    # Additional arguments to pass to the linter
    swift_format_lockwood_args: # optional, default is 
    # Directory where the SwiftFormat command should be run
    swift_format_lockwood_dir: # optional
    # Extensions of files to check with SwiftFormat
    swift_format_lockwood_extensions: # optional, default is swift
    # Shell command to prepend to the linter command
    swift_format_lockwood_command_prefix: # optional, default is 
    # Enable or disable swift-format checks
    swift_format_official: # optional, default is false
    # Additional arguments to pass to the linter
    swift_format_official_args: # optional, default is 
    # Directory where the swift-format command should be run
    swift_format_official_dir: # optional
    # Extrensions of files to check with swift-format
    swift_format_official_extensions: # optional, default is swift
    # Shell command to prepend to the linter command
    swift_format_official_command_prefix: # optional, default is 
    # Enable or disable SwiftLint checks
    swiftlint: # optional, default is false
    # Additional arguments to pass to the linter
    swiftlint_args: # optional, default is 
    # Directory where the SwiftLint command should be run
    swiftlint_dir: # optional
    # Extensions of files to check with SwiftLint
    swiftlint_extensions: # optional, default is swift
    # Shell command to prepend to the linter command
    swiftlint_command_prefix: # optional, default is 
